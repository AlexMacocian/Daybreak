# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

# This continuous integration pipeline is triggered anytime a user pushes code to the repo.
# This pipeline builds the Wpf project, runs unit tests, then saves the MSIX build artifact.
name:  Daybreak CD Pipeline

# Trigger on every master branch push and pull request
on:
  push:
    branches:
      - master

jobs:

  build:

    strategy:
      matrix:
        targetplatform: [x64]

    runs-on: windows-latest

    env:
      Configuration: Release
      Solution_Path: Daybreak.sln
      Test_Project_Path: Daybreak.Tests\Daybreak.Tests.csproj
      Wpf_Project_Path: Daybreak\Daybreal.csproj
      Actions_Allow_Unsecure_Commands: true # Allows AddPAth and SetEnv commands

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.202'

    # Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.1

    # Restore the application
    - name:  Restore the Wpf application to populate the obj folder
      run: msbuild $env:Solution_Path /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
      env:
        RuntimeIdentifier: win-${{ matrix.targetplatform }}

    # Build Daybreak project
    - name: Build Daybreak project
      run: dotnet build Daybreak -c $env:Configuration

    # Set release version environment variable
    - name: Set version variable
      run: |
        $version = .\Scripts\GetBuildVersion.ps1
        echo "::set-env name=Version::$version"

    # Publish release
    - name: Publish release
      run: dotnet publish .\Daybreak\Daybreak.csproj -c $env:Configuration -r $env:RuntimeIdentifier -p:PublishReadyToRun=true -p:PublishSingleFile=true --self-contained true -o .\Publish
      env:
        RuntimeIdentifier: win-${{ matrix.targetplatform }}

    # Create release payload
    - name: Create release payload
      run: |
        Write-Host $env
        .\Scripts\BuildRelease.ps1 -version $env:Version
      shell: pwsh

    # Get latest release
    - name: Get latest release tag
      id: download_release
      uses: Xotl/cool-github-releases@v1.1.2
      with:
        mode: download
        github_token: ${{ env.GITHUB_TOKEN }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Generate changelog
    - name: Generate changelog
      id: gen_changelog
      uses: mikepenz/release-changelog-builder-action@v1.8.0
      with:
        fromTag: ${{ steps.download_release.outputs.tag_name }}
        toTag: ${{ env.Version }}
        token: ${{ env.GITHUB_TOKEN }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Post new release to github
    - name: Post release
      uses: Xotl/cool-github-releases@v1.1.2
      with:
        mode: update
        tag_name: v${{ env.Version }}
        release_name: Daybreak v${{ env.Version }}
        assets: .\Publish\daybreakv${{ env.Version }}.zip
        github_token: ${{ env.GITHUB_TOKEN }}
        replace_assets: true
        body_mrkdwn: ${{ steps.gen_changelog.outputs.changelog }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    